/// A simple wrapper class around a string array, which represents the item
/// choices in a [dropdown list](ZF_DropdownList).
class DCY_ZFDropdownItems {
	/// The items, of which one item in the array corresponds to one shown
	/// choice.
	Array<string> items;
}

/// An element that allows the user to choose from a number of strings by
/// drawing a list when clicked on.
///
/// This element uses the event [`ZF_Handler.dropdownChanged`].
class DCY_ZFDropdownList : DCY_ZFElement {
	private void config(
		DCY_ZFDropdownItems items, Font fnt = NULL, double textScale = 1.0, int textColor = Font.CR_WHITE,
		DCY_ZFBoxTextures boxBg = NULL, DCY_ZFBoxTextures listBg = NULL, DCY_ZFBoxTextures highlightBg = NULL,
		string dropTex = "", int defaultSelection = -1, DCY_ZFHandler cmdHandler = NULL, Name command = '',
		DCY_ZFFrame bindingFrame = NULL
	) {
		setFont(fnt);
		setItems(items);
		setTextScale(textScale);
		setTextColor(textColor);
		setBoxBgTexture(boxBg);
		setListBgTexture(listBg);
		setHighlightBgTexture(highlightBg);
		setDropTex(dropTex);
		setBindingFrame(bindingFrame);
		setAlpha(1.0);

		self.cmdHandler = cmdHandler;
		self.command = command;
		self.selection = defaultSelection;
	}

	/// Returns a newly-created dropdown list element.
	///
	/// The position used is relative to whatever the element is packed into
	/// later.
	///
	/// The items that will be drawn when the dropdown list is clicked on is
	/// stored in `items`, and is simply a wrapper around an `Array<String>`,
	/// where each entry represents one choice. `defaultSelection` controls
	/// which index is initially chosen from this list, where `-1` indicates
	/// nothing is initially chosen.
	///
	/// The `boxBg` box textures are used to draw the part that is clicked on
	/// to open the list, with `dropTex` being used as an icon to show that the
	/// element is a dropdown list - a downwards pointing arrow is a commonly
	/// used graphic for this purpose.
	///
	/// The `listBg` box textures are used to draw the dropdown when it is
	/// active, and `highlightBg` is drawn to indicate which option is
	/// currently being hovered.
	///
	/// `textColor` takes on values from [`Font.EColorRange`], which cannot be
	/// named as a type due to current ZScript limitations.
	///
	/// If `fnt` is `NULL`, then `smallfont` is used instead.
	///
	/// `bindingFrame` controls the frame which the dropdown list will stay
	/// inside of. If a dropdown list cannot fit inside of the `bindingFrame`
	/// by going downwards, it will instead go upwards. If `bindingFrame ==
	/// NULL`, then the entire screen is effectively used as a binding frame.
	///
	/// `cmdHandler` and `command` determine where the button's events are sent
	/// to. [`ZF_Handler.dropdownChanged`] is sent whenever the user changes
	/// the dropdown choice.
	static DCY_ZFDropdownList create(
		Vector2 pos, Vector2 size,
		DCY_ZFDropdownItems items, Font fnt = NULL, double textScale = 1.0, int textColor = Font.CR_WHITE,
		DCY_ZFBoxTextures boxBg = NULL, DCY_ZFBoxTextures listBg = NULL, DCY_ZFBoxTextures highlightBg = NULL,
		string dropTex = "", int defaultSelection = -1, DCY_ZFHandler cmdHandler = NULL, Name command = '',
		DCY_ZFFrame bindingFrame = NULL
	) {
		let ret = new("DCY_ZFDropdownList");

		ret.config(
			items, fnt, textScale, textColor, boxBg, listBg, highlightBg, dropTex,
			defaultSelection, cmdHandler, command, bindingFrame
		);
		ret.setBox(pos, size);

		return ret;
	}

	private DCY_ZFDropdownItems items;
	/// Returns the dropdown items list that this element uses.
	DCY_ZFDropdownItems getItems() { return self.items; }
	/// Sets the dropdown items list that this element uses.
	void setItems(DCY_ZFDropdownItems items) { self.items = items; }

	private int textColor;
	/// Returns the dropdown list's text's color.
	///
	/// This is really a [`Font.EColorRange`], but ZScript currently is a bit limited here.
	int getTextColor() { return self.textColor; }
	/// Sets the dropdown list's text's color.
	///
	/// This is really a [`Font.EColorRange`], but ZScript currently is a bit limited here.
	void setTextColor(int textColor) { self.textColor = textColor; }

	private Font fnt;
	/// Returns the font this dropdown list will use for drawing its text.
	Font getFont() { return self.fnt; }
	/// Sets the font this dropdown list will use for drawing its text.
	///
	/// If this is `NULL`, then `smallfont` is used instead.
	void setFont(Font fnt) {
		if (fnt == NULL) {
			self.fnt = smallfont;
		}
		else {
			self.fnt = fnt;
		}
	}

	private double textScale;
	/// Returns the scaling factor for the drawn text.
	double getTextScale() { return self.textScale; }
	/// Sets the scaling factor for the drawn text.
	void setTextScale(double textScale) { self.textScale = textScale; }

	private int selection;
	/// Returns the index of the choosen item from the array in
	/// [`getItems`]`()`, or `-1` if nothing has been chosen yet.
	int getSelection() { return self.selection; }

	private DCY_ZFFrame bindingFrame;
	/// Returns the frame that binds this dropdown list.
	/// 
	/// If a dropdown list cannot fit inside of the `bindingFrame` by going
	/// downwards, it will instead go upwards. If `bindingFrame == NULL`, then
	/// the entire screen is effectively used as a binding frame.
	DCY_ZFFrame getBindingFrame() { return self.bindingFrame; }
	/// Sets the frame that binds this dropdown list.
	/// 
	/// If a dropdown list cannot fit inside of the `bindingFrame` by going
	/// downwards, it will instead go upwards. If `bindingFrame == NULL`, then
	/// the entire screen is effectively used as a binding frame.
	void setBindingFrame(DCY_ZFFrame bindingFrame) { self.bindingFrame = bindingFrame; }

	private DCY_ZFBoxTextures boxBg;
	/// Returns the box textures used for drawing the part of the element that
	/// is clicked on to drop down the list.
	DCY_ZFBoxTextures getBoxBgTexture() { return self.boxBg; }
	/// Sets the box textures used for drawing the part of the element that is
	/// clicked on to drop down the list.
	void setBoxBgTexture(DCY_ZFBoxTextures boxBg) { self.boxBg = boxBg; }
	private DCY_ZFBoxDrawer boxBgDrawer;

	private DCY_ZFBoxTextures listBg;
	/// Returns the box textures used for drawing the list part of the element
	/// that shows up when the element is clicked.
	DCY_ZFBoxTextures getListBgTexture() { return self.listBg; }
	/// Sets the box textures used for drawing the list part of the element
	/// that shows up when the element is clicked.
	void setListBgTexture(DCY_ZFBoxTextures listBg) { self.listBg = listBg; }
	private DCY_ZFBoxDrawer listBgDrawer;

	private DCY_ZFBoxTextures highlightBg;
	/// Returns the box textures used to draw the higlight for the current
	/// option of the user.
	DCY_ZFBoxTextures getHighlightBgTexture() { return self.highlightBg; }
	/// Sets the box textures used to draw the higlight for the current option
	/// of the user.
	void setHighlightBgTexture(DCY_ZFBoxTextures highlightBg) { self.highlightBg = highlightBg; }
	private DCY_ZFBoxDrawer highlightBgDrawer;

	private string dropTex;
	/// Returns the texture drawn to indicate that this is a dropdown list.
	string getDropTex() { return self.dropTex; }
	/// Sets the texture drawn indicate that this is a dropdown list.
	///
	/// Often a downwards facing arrow is used for this purpose.
	void setDropTex(string dropTex) { self.dropTex = dropTex; }

	private bool clicking;
	private bool active;
	private int hover;
	private bool lastKey;

	private void dropdownAABB(DCY_ZFAABB screenBox) {
		DCY_ZFAABB aabb;
		aabb.pos = (0.0, getDropdownYOff());
		aabb.size = (box.size.x, box.size.y * items.items.size());
		aabbToScreen(screenBox, aabb, false);
		if (bindingFrame != NULL) {
			DCY_ZFAABB bindingBox; bindingFrame.boxToScreen(bindingBox);
			screenBox.rectOfIntersection(screenBox, bindingBox);
		}
	}

	override bool blocksMousePriority(Vector2 mousePos) {
		if (getDontBlockMouse()) return false;
		if (!active) return false;
		DCY_ZFAABB screenBox; dropdownAABB(screenBox);
		return screenBox.pointCollides(mousePos);
	}

	override void drawer() {
		if (hidden) { return; }

		DCY_ZFAABB beforeClip, clipRect;
		screenClip(beforeClip, clipRect);
		Screen.setClipRect(int(clipRect.pos.x), int(clipRect.pos.y), int(clipRect.size.x), int(clipRect.size.y));

		if (clicking) {
			if (highlightBg) highlightBgDrawer.draw(self, (0, 0), box.size, highlightBg, true);
		} else if (boxBg) {
			boxBgDrawer.draw(self, (0, 0), box.size, boxBg, true);
		}
		if (selection != -1) {
			let text = items.items[selection];
			Vector2 pos = getAlignedDrawPos(box.size, (fnt.stringWidth(text), fnt.getHeight()) * textScale, AlignType_CenterLeft);
			drawText(pos + (4.0 * textScale, 0.0), fnt, text, textColor, textScale);
		}
		TextureID dropTexID = TexMan.checkForTexture(dropTex, TexMan.Type_Any);
		if (dropTexID) {
			let dropSize = TexMan.getScaledSize(dropTexID);
			let dropPos = (box.size.x - box.size.y / 2.0, box.size.y / 2.0) - dropSize / 2.0;
			drawImage(dropPos, dropTex, true, (1.0, 1.0));
		}

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));
	}

	private double getDropdownYOff() {
		DCY_ZFAABB aabb;
		aabb.pos = (0.0, box.size.y);
		aabb.size = (box.size.x, box.size.y * items.items.size());
		DCY_ZFAABB dropdownBox; aabbToScreen(dropdownBox, aabb, false);
		DCY_ZFAABB masterBox;
		if (bindingFrame != NULL) {
			bindingFrame.boxToScreen(masterBox);
		}
		else {
			masterBox.size.x = Screen.getWidth();
			masterBox.size.y = Screen.getHeight();
		}
		if (dropdownBox.pos.y + dropdownBox.size.y > masterBox.pos.y + masterBox.size.y) {
			aabb.pos.y = -box.size.y * items.items.size();
			aabbToScreen(dropdownBox, aabb, false);
			if (dropdownBox.pos.y < masterBox.pos.y) {
				return -box.size.y * items.items.size() + (masterBox.pos.y - dropdownBox.pos.y) / getScale();
			}
			else {
				return -box.size.y * items.items.size();
			}
		}
		else {
			return box.size.y;
		}
	}

	override void topDrawer() {
		if (hidden) { return; }
		if (!active) return;

		DCY_ZFAABB screenBox; dropdownAABB(screenBox);
		let mousePos = getGlobalStore().mousePos;
		if (screenBox.pointCollides(mousePos)) {
			hover = -1;
			let diff = mousePos - screenBox.pos;
			diff /= getScale();
			int newSelection = int(diff.y / box.size.y);
			hover = newSelection;
			lastKey = false;
		} else if (!lastKey) {
			hover = -1;
		}

		DCY_ZFAABB beforeClip, clipRect;
		if (bindingFrame != NULL) {
			bindingFrame.screenClip(beforeClip, clipRect);
			Screen.setClipRect(int(clipRect.pos.x), int(clipRect.pos.y), int(clipRect.size.x), int(clipRect.size.y));
		}
		else {
			screenClip(beforeClip, clipRect);
			Screen.clearClipRect();
		}

		if (listBg) {
			listBgDrawer.draw(self, (0, getDropdownYOff()), (box.size.x, box.size.y * items.items.size()), listBg, true);
		}
		if (hover != -1 && highlightBg) {
			highlightBgDrawer.draw(self, (0, getDropdownYOff() + box.size.y * hover), (box.size.x, box.size.y), highlightBg, true);
		}
		for (int i = 0; i < items.items.size(); i++) {
			let text = items.items[i];
			Vector2 pos = getAlignedDrawPos(box.size, (fnt.stringWidth(text), fnt.getHeight()) * textScale, AlignType_CenterLeft);
			drawText(pos + (4.0 * textScale, getDropdownYOff() + box.size.y * i), fnt, text, textColor, textScale);
		}

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));
	}

	private bool setSelectionFromMouse() {
		let mousePos = getGlobalStore().mousePos;
		DCY_ZFAABB dropdownBox; dropdownAABB(dropdownBox);
		if (dropdownBox.pointCollides(mousePos) && hover != -1) {
			let newSelection = hover;
			let fireEvent = selection != newSelection;
			selection = newSelection;
			if (fireEvent && cmdHandler != NULL) {
				cmdHandler.dropdownChanged(self, command);
			}
			return true;
		}
		DCY_ZFAABB screenBox; boxToScreen(screenBox);
		return screenBox.pointCollides(mousePos);
	}

	override bool onNavEvent(DCY_ZFNavEventType type, bool fromController) {
		if (isEnabled()) {
			if (active) {
				switch (type) {
				case DCY_ZFNavEventType_Confirm: {
					let newSelection = hover;
					let fireEvent = selection != newSelection;
					selection = newSelection;
					if (fireEvent && cmdHandler != NULL) {
						cmdHandler.dropdownChanged(self, command);
					}
					active = false;
					break;
				}
				case DCY_ZFNavEventType_Down: {
					if (hover == -1) { hover = 0; }
					else {
						hover += 1;
						if (hover == items.items.size()) {
							hover -= 1;
						}
					}
					lastKey = true;
					break;
				}
				case DCY_ZFNavEventType_Up: {
					if (hover == -1) { hover = items.items.size() - 1; }
					else {
						hover -= 1;
						if (hover == -1) {
							hover = 0;
						}
					}
					lastKey = true;
					break;
				}
				}
				return true;
			} else if (isFocused() && type == DCY_ZFNavEventType_Confirm) {
				active = true;
				setHoverBlock(self);
				hover = -1;
				return true;
			}
		}
		return false;
	}

	override bool onUIEventPriority(DCY_ZFUiEvent ev) {
		let mousePos = getGlobalStore().mousePos;
		if (ev.type == UIEvent.Type_LButtonDown) {
			if (isEnabled()) {
				if (active) {
					active = false;
					return setSelectionFromMouse();
				}
				return false;
			}
		}
		else if (ev.type == UIEvent.Type_LButtonUp && clicking) {
			clicking = false;
			setHoverBlock(NULL);
			DCY_ZFAABB screenBox; dropdownAABB(screenBox);
			if (active && screenBox.pointCollides(mousePos)) {
				active = false;
				return setSelectionFromMouse();
			}
		}
		else if (ev.type == UIEvent.Type_WheelDown || ev.type == UIEvent.Type_WheelUp) {
			active = false;
		}
		return false;
	}

	override bool onUIEvent(DCY_ZFUiEvent ev) {
		if (ev.type == UIEvent.Type_LButtonDown) {
			if (isEnabled()) {
				DCY_ZFAABB screenBox; boxToScreen(screenBox);
				let mousePos = getGlobalStore().mousePos;
				if (!active && !mouseBlock && screenBox.pointCollides(mousePos)) {
					active = true;
					hover = -1;
					clicking = true;
					DCY_ZFAABB dropdownBox; dropdownAABB(dropdownBox);
					if (dropdownBox.pointCollides(mousePos)) {
						clicking = false;
					}
					setHoverBlock(self);
				}
			}
		}
		return false;
	}
}
