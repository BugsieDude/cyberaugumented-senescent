Class DCY_AbyssalExarch : DCY_Rev
{
  Default
  {
  Health 1400;
  Translation "80:111=%[0.00,0.00,0.00]:[0.48,0.48,0.48]", "1:3=%[0.00,0.00,0.00]:[0.48,0.48,0.48]", "5:12=%[0.00,0.00,0.00]:[0.48,0.48,0.48]", "168:191=%[0.00,0.00,0.00]:[0.35,0.35,0.35]", "16:47=%[0.00,0.00,0.00]:[0.35,0.35,0.35]", "160:167=%[0.00,0.00,0.00]:[0.35,0.35,0.35]", "192:207=%[0.00,0.00,0.00]:[0.00,1.01,2.00]", "4:4=%[0.00,0.00,0.00]:[0.00,1.01,2.00]", "208:235=%[0.00,0.00,0.00]:[0.02,0.47,2.00]", "48:79=%[0.00,0.00,0.00]:[0.00,0.41,1.81]", "128:159=%[0.00,0.00,0.00]:[0.00,0.35,1.50]", "13:15=%[0.00,0.00,0.00]:[0.00,0.35,1.50]", "236:239=%[0.00,0.00,0.00]:[0.27,0.27,0.27]";
  Tag "\c[w9]Abyssal Exarch\c-";
  BloodColor "Black";
  Speed 9;
  FastSpeed 10;
  +MISSILEEVENMORE
  +NOINFIGHTING
  SeeSound "Exarch/Sight";
  ActiveSound "Exarch/Sound";
  PainSound "Exarch/Pain";
  DeathSound "Exarch/Death";
  Obituary "%o couldn't react before %h saw the Abyssal Exarch, resulting in a paradoxal fiasco.";
  +DCYMONSTER.DCYNORMALBOSS;
  DCYMonster.FootstepFrames 0, 2, 4;
  }
  
  bool dead;
  bool cloned;
  int speeder;
  
  override void Tick()
  {
	if (level.isFrozen()) return;
	Super.Tick();
	
	if (!dead)
	{
		if (!(level.time % 3)) A_SpawnParticleEx(0x222222, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_SUBTRACT, SPF_FULLBRIGHT|SPF_RELATIVE, 200, 180, 0, frandom(-20, 20) - 10, frandom(-20, 20), 36 + frandom(-20, 20), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), startalphaf: 0.2, fadestepf: 0.00185, sizestep: 1.525);
		A_SpawnItemEx("DCY_ExarchGhost", -1, zofs: 5, xvel: -0.5, yvel: frandom(-2.75, 2.75), zvel: frandom(0, 2.75), flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME, failchance: 140);
	}
  }
  
  States
  {
  Spawn:
	DDAN A 10 DCY_Look();
	Loop;
  Look:
    DDAN AABBCCDD 3 DCY_LookingForPlayer();
    Loop;
  Alert:
    "####" "#" 0 DCY_AlertSound();
  See:
	DDAN AABBCCDD 3
	{
		DCY_Chase();
		Return A_Jump(10, "Dash");
	}
	Loop;
  Dash:
	DDAN AABBCCDD 1
	{
		for (int i = 2; i > 0; i--)
			DCY_Chase();
		
		A_SpawnItemEx("DCY_ExarchGhost", zofs: 5, xvel: frandom(-3.75, 3.75), yvel: frandom(-3.75, 3.75), zvel: frandom(0, 3.75), flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME, failchance: 140);
		A_SpawnParticleEx(0x222222, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_SUBTRACT, SPF_FULLBRIGHT|SPF_RELATIVE, 200, 180, 0, frandom(-20, 20) - 10, frandom(-20, 20), 36 + frandom(-20, 20), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), startalphaf: 0.2, fadestepf: 0.003, sizestep: 1.525);
		if (!random(0, 20)) SetStateLabel("See");
	}
	Loop;
  Melee:
  Missile:
	DDAN E 0
	{
		if (health < 750 && !cloned) return A_Jump(50, "Clone");
		If (target && Distance3D(target) < 400) return A_Jump(40, "HoeSpotted");
		return ResolveState("MissileContinue");
	}
	Goto MissileContinue;
  Fuck:
	DDAN A 1
	{
		speeder = random(10, 30);
		A_StartSound("Misc/DemonicGibberish", CHAN_7, CHANF_OVERLAP, attenuation: 0.5);
	}
	DDAN ABCD 1
	{
		if (speeder <= 0)
		{
			A_StopSound(CHAN_7);
			SetStateLabel("MissileContinue");
		}
		
		for (int i = 20; i > 0; i--)
		{
			A_Wander();
			DCY_Chase(null, null, CHF_NOPLAYACTIVE);
		}
		
		A_SpawnItemEx("DCY_ExarchGhost", zofs: 5, xvel: frandom(-2.75, 2.75), yvel: frandom(-2.75, 2.75), zvel: frandom(0, 2.75), flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME, failchance: 40);
		speeder--;
	}
	Goto Fuck+1;
  Clone:
	DDAN H 10
	{
		if (cloned && health > 400)
			SetStateLabel("MissileContinue");
		
		A_StartSound("Exarch/Attack", CHAN_VOICE, attenuation: 0.65);
		A_FaceTarget();
		bNOPAIN = true;
	}
	DDAN HH 10
	{
		cloned == true;
		let rev = Spawn("DCY_AbyssalExarchClone", pos + (randompick(-30, -30), randompick(-30, -30), 0));
		if (rev)
		{
			rev.health /= 1.25;
			rev.A_ChangeVelocity(frandom(10.0, -10.0), 0, frandom(1, 5), CVF_REPLACE);
			rev.tics *= 0.5;
			rev.bThruSpecies = true;
			rev.bLookAllARound = true;
			rev.Mass *= 999;
			
			if (bFriendly == true)
				rev.bFriendly = true;
		}
	}
	DDAN H 1 { bNOPAIN == false; }
	Goto See;
  MissileContinue:
	DDAN E 0
	{
		switch(random(0, 1))
		{
			case 0: Return ResolveState("Grenade");
			case 1: Return ResolveState("Micromissile");
		}
		
		Return ResolveState(null);
	}
	Goto See;
  Grenade:
	DDAN E 10 A_FaceTarget();
	DDAN FGF 8
	{
		A_FaceTarget();
		A_SpawnProjectile("DCY_ExarchGrenade", 65, 0, frandom(-4.0, 4.0), CMF_OFFSETPITCH, pitch - random(7, 10));
		A_StartSound("DCYRifleGrenade", CHAN_WEAPON);
	}
	Goto See;
  Micromissile:
	DDAN E 15 A_FaceTarget();
	DDAN FGFGFGF 5
	{
		A_FaceTarget();
		A_SpawnProjectile("DCY_ExarchMicro", 65, 0, frandom(-5.0, 5.0), CMF_OFFSETPITCH, pitch + random(-5, 5));
	}
	Goto See;
  HoeSpotted:
	DDAN HHHHHHHHHHH 1
	{
		for (int i = 3; i > 0; i--) A_StartSound("Exarch/Dash", CHAN_5, CHANF_OVERLAP, 0.6, pitch: frandom(0.9, 1.7));
		A_Recoil(-7);
		A_SpawnItemEx("DCY_GTrail", flags: SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME|SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
	}
	DDAN H 1 A_Stop();
	Goto MissileContinue;
  Pain:
	DDAN H 1;
	DDAN H 3 A_Jump(30, "Cloak", "Fuck");
	DDAN I 4 A_Pain();
	Goto See;
  Cloak:
	D1AN A 1 { bShootable = false; bInvulnerable = true; bNoPain = true; A_StartSound("Exarch/Cloak", CHAN_BODY); }
	D1AN ABCDEFGHIJK 3;
	D1AN KKKKK 1 A_FadeOut(0.2, 0);
	TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAA 1
	{
		for (int i = 5; i > 0; i--)
			A_Chase(null, null, CHF_NOPLAYACTIVE);
	}
	D1AN K 0 A_StartSound("Exarch/Cloak", CHAN_BODY);
	D1AN KKKKK 1 A_FadeIn(0.2, 0);
	D1AN LMNOPQRS 3;
	D1AN A 1 { bShootable = true; bInvulnerable = false; bNoPain = false; }
	Goto Missile;
  Death:
	DDAN J 1;
	DDAN J 6 A_Scream();
	DDAN KLM 5;
	DDAN N 5
	{
		A_NoBlocking();
		dead = true;
	}
	DDAN OPQRST 4;
	DDAN U -1;
	Stop;
  Raise:
	Stop;
  }
}

Class DCY_ExarchGrenade : DCY_Grenade
{
  Default
  {
  Translation "0:255=%[0.00,0.00,0.00]:[0.19,0.64,1.82]", "128:159=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "48:79=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "13:15=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "236:239=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "80:111=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "1:2=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "5:8=%[0.00,0.00,0.00]:[0.43,0.43,0.43]";
  Speed 20;
  Gravity 0.8;
  Damage 5;
  Scale 0.99;
  BounceFactor 0.4;
  BounceCount 5;
  BounceType "Hexen";
  }
  
  States
  {
  Spawn:
	MNAD A 1
	{
		if (DCY_EffectDistance(900))
		{
			A_SpawnFlames("193273", 25, 40, 0, true, frandom(-2.5, 2.5));
			A_SpawnParticleEx(0x193273, TexMan.CheckForTexture("Graphics/particles/dcysquarep.png"), STYLE_ADD, SPF_FULLBRIGHT, random(20, 40), random(3, 9), frandom(0, 360), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-0.35, 0.35), frandom(-0.35, 0.35), frandom(-0.35, 0.35), frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(-0.2, 0.2), sizestep: -0.325);
		}
	}
	Loop;
  Death:
	MNAD A 1 Bright;
	NBKL D 2 Bright
	{
		A_Explode();
		bNoGravity = true;
		A_SetRenderStyle(1.0, STYLE_ADD);
		A_QuakeEx(2, 2, 2, 20, 0, 450, "", QF_SCALEDOWN|QF_3D);
		A_Explode(40, 128, 1, 0, 10);
	}
	NBKL E 2 Bright
	{
		for (int i = 3; i > 0; i--)
			A_SpawnItemEx("DCY_Explosion_1", frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-2.0, 2.0), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0, 360), SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
	}
	NBKL FGHIJKLM 2 Bright;
	Stop;
  }
}

Class DCY_ExarchMicro : DCY_CyberMicromissile
{
  Default
  {
  Translation "0:255=%[0.00,0.00,0.00]:[0.19,0.64,1.82]", "128:159=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "48:79=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "13:15=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "236:239=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "80:111=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "1:2=%[0.00,0.00,0.00]:[0.43,0.43,0.43]", "5:8=%[0.00,0.00,0.00]:[0.43,0.43,0.43]";
  Speed 13;
  +NEVERFAST
  Damage 5;
  +SEEKERMISSILE
  }
  
  States
  {
  Spawn:
	SMOL A 1
	{
		if (DCY_EffectDistance(900)) A_SpawnFlames("193273", 35, 35, 0, true, frandom(-2.5, 2.5));
		A_SeekerMissile(2, 2, SMF_PRECISE);
	}
	Loop;
  Death:
	SMOL B 1
	{
		A_SetTranslucent(1.0, 1);
		for (int i = 3; i > 0; i--)
			A_SpawnItemEx("DCY_Explosion_1", frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(-2.0, 2.0), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(0, 360), SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		A_QuakeEx(1, 1, 1, 20, 0, 100, "none", QF_RELATIVE|QF_SCALEDOWN, falloff: 200);
	}
	SMOL CDEFGHIJKL 1;
	TNT1 A 8;
	Stop;
  }
}

Class DCY_AbyssalExarchClone : DCY_AbyssalExarch
{
  Default
  {
  -COUNTKILL
  -BOSS
  SeeSound "";
  DeathSound "";
  Damagefactor 1.3;
  }
  
  override void Tick()
  {
	if (level.isFrozen()) return;
	DCY_Rev.Tick();
	
	if (!dead)
	{
		if (!(level.time % 3)) A_SpawnParticleEx(0x222222, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_SUBTRACT, SPF_FULLBRIGHT|SPF_RELATIVE, 200, 180, 0, frandom(-20, 20) - 10, frandom(-20, 20), 36 + frandom(-20, 20), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), startalphaf: 0.2, fadestepf: 0.00185, sizestep: 1.525);
		A_SpawnItemEx("DCY_ExarchGhost", -1, zofs: 5, xvel: -0.5, yvel: frandom(-2.75, 2.75), zvel: frandom(0, 2.75), flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME, failchance: 140);
	}
  }
  
  States
  {
  Death:
	D1AN A 1 A_StartSound("Exarch/Cloak", CHAN_BODY);
	D1AN ABCDEFGHIJK 3;
	D1AN KKKKK 1 A_FadeOut(0.2, 0);
	Stop;
  Clone:
	Goto MissileContinue;
  }
}