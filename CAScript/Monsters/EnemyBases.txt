Class DCY_GuyOnFire : DCYMonster
{
  class<Actor> og;
  
  Default
  {
  -ISMONSTER
  -COUNTKILL
  +NONSHOOTABLE
  +NOBLOOD
  -SOLID
  Height 56;
  Radius 20;
  }
  
  States
  {
  Spawn:
	FUUU A 0 NoDelay { A_NoBlocking(); A_Die(); }
  Death:
	FUUU ABCDEFGHIJKLMNOPQRSTU 3 Bright
	{
		A_SpawnItemEx("DCY_ImpBigFlame", random(-12, 12), random(-12, 12), random(10, 45), 0, 0, random(2, 6), 0, SXF_NOCHECKPOSITION, failchance: 100);
		A_SpawnItemEx("DCY_ImpFlame1", random(-12, 12), random(-12, 12), random(10, 45), 0, 0, random(2, 6), 0, SXF_NOCHECKPOSITION, failchance: 100);
	}
	FUUU V -1;
	Stop;
  Raise:
	FUUU UTRPNLJHFDBA 3 Bright;
	FUUU A 0 Bright
	{
		if (og)
		{
			Actor r = Spawn(og, pos);
			if (r)
			{
				r.CopyFriendliness(self, true);
				r.angle = angle;
			}
		}	
	}
	Stop;
  }
}

CLASS DCYMonster : Actor abstract
{
  mixin DCY_Effects;
  double sfxdistance;
  
  Default
  {
    Monster;
    +FLOORCLIP;
	+ROLLCENTER;
	DCYMonster.TagColor "j";
	DCYMonster.GibType "DCY_Giblets";
	Tag "Monster";
	TeleFogSourceType "DCY_EnemySourceTeleport";
	TeleFogDestType "DCY_EnemyTeleport";
	DamageFactor "SpawnerDeath", 0;
	DCYMonster.WD 1000;
	DCYMonster.ExtraPrefix "";
	DCYMonster.CanAnnounce false;
  }
  
  double warningdistance;
  bool bossfound;
  bool bosscanannounce;
  property WD : warningdistance;
  string bosssnd, bossmsg, bosscol;
  property CanAnnounce : bosscanannounce;
  property AnnounceSound : bosssnd;
  property AnnounceMessage : bossmsg;
  property AnnounceColor : bosscol;
  
  private int b;
  flagdef dcynormalBoss : b, 1;
  flagdef dcyBoss : b, 2;
  flagdef dcySuperBoss : b, 3;
  
  Sound brns;
  string tcol;
  class<Actor> gib;
  transient TextureID particlefire;
  
  string wf;
  property WalkFlames : wf;
  sound ft;
  property FootstepSound : ft;
  
  property BurnSound: brns;
  property TagColor: tcol;
  property GibType: gib;
  
  string scientific, oldtag, humantag;
  property ScientificName : scientific;
  string extran;
  property ExtraPrefix : extran;
  
  override void tick()
  {
	super.tick();
	
	//Tag handling
	switch (dcy_scientificname)
	{
		case 0: SetTag((dcy_humanname && humantag != "") ? humantag : oldtag); break;
		case 1: case 2: A_ScientificName(); break;
		case 3: case 4: A_CheckForTag(); break;
	}
	
	if (!cyberaugumented_noenemyannouncements && bosscanannounce && dcy_announcetype == 0 && !bossfound)
		if (DCY_EffectRange(warningdistance * 1.65)) { ThingAnnounce(bossmsg, bosssnd, bosscol); bossfound = true; }
	if (cyberaugumented_noenemyannouncements) bossfound = true;
	
	if (!particlefire)
		particlefire = TexMan.CheckForTexture("graphics/Particles/dcysmokep.png");
  }
  
  bool A_CheckForTag()
  {
	if (species == "Former Humans" || species == "Sergeants" || species == "Chaingunners" || self is 'DCY_BionicZombie' || self is 'DCY_ArcheSpiritwalker')
	{
		SetTag((dcy_humanname && humantag != "") ? humantag : oldtag);
		return true;
	}
	else A_ScientificName();
	return false;
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	sfxdistance = 1500;
	
	oldtag = GetTag();
	
	if ((!cyberaugumented_noenemyannouncements && bosscanannounce) && dcy_announcetype == 1 && !bossfound)
		{ ThingAnnounce(bossmsg, bosssnd, bosscol); bossfound = true; }
	else if ((cyberaugumented_noenemyannouncements && bosscanannounce) && dcy_announcetype == 1 && !bossfound) bossfound = true;
	
	let x = DCY_Variables.Get();
	
	if (x)
	{
		if (bDCYNORMALBOSS || bDCYBOSS) x.minibosscount++;
		if (bDCYSUPERBOSS) x.superbosscount++;
	}
  }
  
  int ProgressionLevel()
  {
	let d = DCY_Variables.Get();
	return (d) ? d.dcyLevel : 0;
  }
  
  void A_SetPainChance(int num)
  {
	painchance = num;
  }
  
  void A_BossDeath2()
  {
	A_BossDeath();
	//A_KillMaster("SpawnerDeath");
  }
  
  void DCY_Footstep()
  {
	if (ft == "") return;
	if (DCY_EffectDistance(sfxdistance)) A_StartSound(ft, 30);
  }
  
  void A_WalkFlame()
  {
	if (wf == "") return;
	if (DCY_EffectDistance(sfxdistance)) A_SpawnItemEx(wf, xvel: 1, flags: SXF_NOCHECKPOSITION);
  }
  
  void DCY_Look()
  {
	A_LookEx((level.levelname == "Decimal Error") ? LOF_NOSOUNDCHECK|LOF_NOSEESOUND : LOF_NOSEESOUND, label: "Look");
  }
  
  void DCY_LookingForPlayer()
  {
	A_Chase(null, "Alert", CHF_NOPLAYACTIVE);
  }
  
  void A_Dodging(double speed)
  {
	Vel3DFromAngle(speed, Angle*128/256+random(64, 192), 0);
  }
  
  void A_Hop(double height)
  {
    vel.z += height;
  }
  
  void A_Flip()
  {
	A_SetScale(Scale.X * randompick(-1, 1), Scale.Y);
  }
  
  void DCY_AlertSound()
  {
	A_StartSound(SeeSound, CHAN_VOICE, attenuation: (!bBOSS) ? 1 : 0);
  }
  
  void DCY_SoulExplode()
  {
	if (damagetype != "Massacre")
	{
		A_SpawnItemEx("DCY_TSoul", frandom(-radius, radius), frandom(-radius, radius), frandom(0, height), zvel: frandom(1.5, 2.5), flags: SXF_TRANSFERSCALE|SXF_TRANSFERALPHA);
		if (!random(0, 1)) A_SpawnParticleEx(0x0f52ba, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, 200, 120, 0, frandom(-20, 20), frandom(-20, 20), 36 + frandom(-20, 20), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), startalphaf: 0.35, fadestepf: 0.0025, sizestep: 1.525);
	}
  }
  
  void DCY_Gibs(bool playsnd = true)
  {
	if (playsnd) A_StartSound("misc/biggibbed", CHAN_VOICE);
	if (!dcy_gibbing || !DCY_EffectDistance(2000)) return;
	A_SpawnItemEx(gib, xvel: vel.x, yvel: vel.y, zvel: vel.z, flags: SXF_ABSOLUTEVELOCITY|SXF_USEBLOODCOLOR);
  }
  
  void DCY_ArachnoExplosion(class<Actor> type = "DCY_Explosion_1", sound snd = "misc/bubblegore", int style = STYLE_NORMAL)
  {
	if (dcy_gibbing) A_StartSound(snd, 12);
	if (!DCY_EffectDistance(2000) || !dcy_gibbing) return;
	for (int i = random(3, 10); i > 0; i--)
	{
		let bld = Spawn("De_Blood_BigSplat", pos + (frandom(-20, 20), frandom(-20, 20), frandom(-20, 20) + 40));
		if (bld)
		{
			bld.scale *= 2.5;
			bld.vel.x += frandom(-5, 5);
			bld.vel.y += frandom(-5, 5);
			bld.vel.z += frandom(1, 6.5);
			bld.gravity /= 6;
			bld.translation = self.bloodtranslation;
			bld.A_SetRenderStyle(1, style);
			if (style == STYLE_ADD) bld.bBRIGHT = true;
		}
	}
	for (int i = 3; i > 0; i--) A_SpawnItemEx(type, frandom(-20, 20), frandom(-20, 20), frandom(10, 40) + 25, frandom(-2, 2), frandom(-2, 2), frandom(-0.1, 6), flags: SXF_NOCHECKPOSITION);
	DCY_Gibs(false);
  }
  
  static void ThingAnnounce(String message, String sound, String mColor)
  {
	if (cyberaugumented_noenemyannouncements || level.mapname == "TITLEMAP" || gamestate == GS_TITLELEVEL)
		return;
		
	console.printf("\c".."["..mColor.."]"..message.."\c-");
	if(sound) S_StartSound(sound, CHAN_5, CHANF_DEFAULT);
  }
  
  void A_PoundEffect(float gscale = 100, float gspeed = 100)
  {
	for (int i = 0; i < 360; i += random(10, 30))
		if (DCY_EffectDistance(sfxdistance))
		{
			A_SpawnParticleEx(0xaaaaaa, TexMan.CheckForTexture("graphics/Particles/dcygas.png"), STYLE_TRANSLUCENT, SPF_RELATIVE, random(90, 95), 100 * (gscale / 100), i, zoff: 5, velx: frandom(1, 3) * (gscale / 100) * (gspeed / 100), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), accelz: 0.01, startalphaf: 0.35, fadestepf: 0.0075, sizestep: 1 * (gscale / 100));
			A_SpawnParticleEx(0x666666, TexMan.CheckForTexture("graphics/Particles/dcyflamep.png"), STYLE_ADD, SPF_RELATIVE, random(90, 95), 100 * (gscale / 100), i, zoff: 5, velx: frandom(1, 3) * (gscale / 50) * (gspeed / 50), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), accelz: 0.01, startalphaf: 0.35, fadestepf: 0.0075, sizestep: 1 + (gscale / 100));
		}
		
	for (int i = random(10, 24); i > 0; i--)
		if (DCY_EffectDistance(sfxdistance)) A_SpawnParticleEx(0x4f403d, TexMan.CheckForTexture("graphics/Particles/dcysquarep.png"), STYLE_TRANSLUCENT, SPF_RELATIVE, random(90, 95), random(2, 4), 0, frandom(-20, 20) * (gscale / 100), frandom(-20, 20) * (gscale / 100), 10, velx: frandom(-9, 9) * (gscale / 100), vely: frandom(-9, 9) * (gscale / 100), velz: frandom(1, 6) * (gscale / 100), accelz: -0.5, sizestep: -0.05);
  }
  
  void A_Restore()
  {
	A_SetScale(abs(Scale.X), Scale.Y);
  }

  override void Die(Actor source, Actor inflictor, int dmgflags, name MeansOfDeath)
  {
	let x = DCY_Variables.Get();
	
	if (x)
	{
		if (bDCYNORMALBOSS || bDCYBOSS) x.minibossbeaten++;
		if (bDCYSUPERBOSS) x.superbossbeaten++;
	}
	
	Super.Die(source,inflictor,dmgflags,meansofdeath);
  }
  
  static const string human_extraname[] =
  {
	"Pvt.", "Lcpl.", "Cpl.", "Dr.", "Mr.", "WO1.", "CW2.", "CW3.", "CW4.", "CW5.", "Lt.", "2ndLt.", "1stLt.", "Lil", "", "", ""
  };
  
  static const string human_extranamesg[] =
  {
	"Sgt.", "SSgt.", "Col.", "LtCol.", "Mr.", "Pvt.", "CW2.", "CW3.", "CW4.", "CW5.", "Dr.", "2ndLt.", "1stLt.", "SgtMa.", "Major",
	"MSgt.", "GySgt.", "MGySg.", "", "", ""
  };
  
  static const string human_extranamecg[] =
  {
	"Cpt.", "Cap.", "MajCol.", "Maj.", "BGen.", "MajGen.", "LtCol.", "PFC.", "CW4.", "CW5.", "Com.", "Commander", "Captain", "SgtMa.", "Major",
	"Col.", "Colonel", "", "", ""
  };
  
  static const string human_firstname[] =
  {
	"Alex", "Jacob", "Jon", "Joe", "Bruno", "Kevin", "Kelvin", "Tashiro", "Nomi", "Okada", "Pablo", "Juan", "Carlos", "Zi", "Zheng", "Xia", "Mia",
	"Gabby", "Haiden", "Eric", "Erick", "Lynn", "Spencer", "Archie", "Isaac", "Zach", "Frank", "Cayden", "Joel", "Lee", "Sammy", "Axel", "Eduardo", "Maia", "Sam",
	"Mulweri", "Lavani", "Dwayne", "Nathan", "Johnathan", "Joshua", "Andres", "Avery", "Max", "Otonia", "Ctimene", "Dylan", "Anton", "Vladimir", "Tisha", "Aaron",
	"Alfred", "Charlie", "Will", "Peter", "Tom", "Elmer", "Jesse", "Grover", "Ernest", "Eugene", "Francis", "Edgar", "Otto", "Jack", "Luther", "Patrick",
	"Harvey", "William", "Achilles", "Alexander", "Gianna", "Gianni", "Giovanna", "Grant", "Arushi", "Maxwell", "Athena", "Chloris", "Mark", "Dzmitry", "Dmitri", "Adetokunbo",
	"Terminus", "Brooke", "Amery", "Burt", "Tommy", "Jane", "John", "Philbert", "Fortune", "Alexandra", "Mirela", "Fawziya", "Sasha", "Yalcin", "Metis", "Faysal", "Ferdo", "Vulcan", 
	"Vayu", "Mokosh", "Pontus", "Lycus", "Kalevi", "Brighid", "Venus", "Nanaya", "Dagda", "Hermes", "Lir", "Karme", "Polyhymnia", "Maxie", "Marilena", "Ilean", "Shon", "Lucius", "Cannon", 
	"Ryker", "Kira", "Khloe", "Vinny", "Petre", "Wisteria", "Florina", "Lenora", "Solomon", "Mabel", "Celinda", "Annette", "Derek", "Averill", "Shelagh", "Charlene", "Joi", "Gwendolyn", 
	"Morris", "Erik", "Jinny", "Kelia", "Chelsey", "Kodey", "Fortune", "Ida", "Laila", "Yaroslava", "Avdey", "Vladilen", "Trofim", "Roman", "Veronika", "Kirill", "Marusya", "Artemi", 
	"Alexandru", "Zakariyya", "Jathbiyya", "Mansur", "Abul-Fazl", "Latifah", "Nora", "Salma", "Aya", "Chi", "Huy", "Argos", "Calypso", "Erebus", "Alecto", "Achilleus", "Phaidra", "Antinanco", 
	"Diindiisi", "Itzamna", "Ha-o-zinne", "Liwen", "Yeruti", "Aslaug", "Margarete", "Christa", "Jon", "Atle", "Gernot", "Adrian", "Jacobine", "Willy", "Stine", "Tilman", "Walther", "Walter", 
	"Ernst", "Tim", "Timmy", "Jane", "Christin", "Archil", "Mimoza", "Franz", "Xaver", "Toni", "Hermann", "Erich", "Golzar", "Roshan", "Hyun-Joo", "Eun-U", "Ji-Young", "Hwan", "Jong", "Misao",
	"Minoru", "Chihiro", "Shinobu", "Hibiki", "Yoshi", "Rin", "Laverne", "Daly", "Kendal", "Jessy", "Leighton", "Casey", "Logan", "Sage", "Kasey", "Leighton", "Reign", "Eddie", "Karsyn", "Ryley", 
	"Berny", "Dene", "Austyn", "Alexis", "Leighton", "Chandler", "Everest", "Allison", "Alexandros", "Pelias", "Damocles", "Megaera", "Aether", "Rheie", "Nike", "Alastor", "Asteria", "Hyperion", 
	"Afina", "Acantha", "Glaukos", "Billie-Jo", "Naamah", "Sweetsmile", "AutumnCinder", "Iron-Hit", "Dolly-Leigh", "Gentlecheeks", "Olyvya", "Cindy-Dawn", "Bubba", "Karlee", "Stone", "Masher", 
	"Grapple", "Atomic-Crusher", "Billie-Rae", "Peaceflow", "Vance", "Faust", "Conlaoch", "Coatlicue", "Jody", "Shaw", "Billie", "Robinson", "Jackie", "Johnston", "Danny", "Doyle", "Jackie",
	"Morris", "Rowan", "Manning", "Kris", "Sullivan", "Kerry", "Pace", "Brice", "Bailey", "Reed", "Mendez", "Gwen", "Harley", "Barrett", "Jo", "Hunter", "Sammy", "Graham", "Scott", "Mccoy",
	"Kiran", "Joyce", "Raylee", "Lowe", "Bret", "Guerra"
  };
  
  static const string human_middlename[] =
  {
	"Miguel", "Chan", "Gabe", "Fox", "Davis", "Retta", "Idaeus", "Vadik", "Diya", "Giulio", "Julio", "August", "Augustus", "Augustine", "Cormac", "Caio", "Beck", "Simon", "Mario", "Gallcobar", "Ovidius",
	"Marianna", "Emmanuelle", "Viktor", "Vigdis", "Yeruti", "Hanna", "al-Din", "Sienna", "Ekrem", "Luciano", "Tamara", "Segdae", "Sveinn", "Daliborka",
	"Magda", "Ness", "Alfonz", "Zakaria", "Bonaventure", "Bernard", "Koronis", "Eugenios", "Achan", "Sydney", "Sondra", "Deana", "Case", "Ariyah", "Earl",
	"Elma", "Shavon", "Honey", "Bertrand", "Lylah", "Rubye", "Ruby", "Gorden", "Meryl", "Bert", "Bertina", "Pippa", "Dorian", "Malone", "Everest", "Andy", "Odell", 
	"Hera", "Blythe", "Lindsay", "Regan", "Greer", "Courtney", "Jojo", "Justy", "Skyler", "Jaden", "Laurie", "Quin", "Dana", "Dannie", "Quinlan", "Remington", "Gray",
	"Bellamy", "Justice", "Cedar", "Hamilton", "Fran", "McKenzie", "Carlisle", "Collyn", "Jerry", "Riley", "Beck", "Emory", "Shawn", "Devon", "Tracy", "Pacey", "Rorie", 
	"Riley", "September", "Briar"
  };
  
  static const string human_lastname[] =
  {
	"Xiang", "Francis", "Cervantes", "Joe", "Cook", "Knight", "Zensetsu", "Yamagata", "Akimi", "Akira", "Rodriguez", "Coronel", "Velez", "Hernandez", "Lawrence", "Hong", "Chang",
	"Miu", "Hildur", "Stefan", "Chapman", "Walker", "Wilson", "Miles", "Tsan'wisi", "Rick", "Lau", "Zhang", "Labrador", "Zhihao", "Dmitri", "Petrovich", "Antonovich",
	"Gonzales", "Clyde", "Stone", "Lester", "Edgar", "August", "Augustus", "Chan", "Ho", "Aten", "Atem", "Hayley", "Hailey", "Helena", "Hemera", "Asuke", "Harvey", "Harve",
	"Charlton", "Ingram", "Chu", "Rais", "Pierre", "Adallinda", "Yama", "Hovhannes", "Felicia", "Ginny", "Gayle", "Elissa", "Emily", "Connie", "Anemone", "Garnet", "Kassandra",
	"Rosy", "Kermit", "Jaki", "Elle", "Doe", "King", "Takara", "Yoshie", "Chiaki", "Kazumi", "Shiori", "Yuki", "Kohaku", "Aoi", "Amore", "Giusi", "Fiore", "Gio", "Celeste", "Giusi", 
	"Maria", "Fiore", "Shea", "Aran", "Shay", "Nollaig", "Bronte", "Paget", "Blue", "Sheridan", "Haze", "Cree", "Fortune", "Darcy", "Jaden", "Camryn", "Terry", "Monroe", "Andie", "Jules", 
	"Malone", "Ridley", "Berny", "Dakota", "Jayme", "Kevyn", "Shelby", "Dusty", "Blessing", "Darian", "Marshall", "Woods", "Wood", "Rock", "Beau", "Teddie", "Campbell", "Romilly", "Justice", 
	"Parker", "Stace", "Chris", "Cary", "Daley", "Martie", "Rorie", "Adair", "Stacey", "Franny", "Sydney", "Silver", "Salem", "Frankie", "Waverly", "Noel", "Jess", "Frankie", "Johnie", "Bobbie",
	"Malone", "Everest", "Andy", "Odell", "Peyton", "Blythe", "Lindsay", "Regan", "Greer", "Courtney", "Jojo", "Justy", "Skyler", "Jaden", "Laurie", "Quin", "Dana", "Dannie", "Quinlan", "Remington", 
	"Gray", "Bellamy", "Justice", "Cedar", "Hamilton", "Fran", "McKenzie", "Carlisle", "Collyn", "Jerry", "Riley", "Beck", "Emory", "Shawn", "Devon", "Tracy", "Pacey", "Rorie", "Riley", "September", 
	"Briar", "Laverne", "Daly", "Kendal", "Jessy", "Leighton", "Casey", "Logan", "Sage", "Kasey", "Leighton", "Reign", "Eddie", "Karsyn", "Ryley", "Berny", "Dene", "Austyn", "Alexis", "Leighton", 
	"Chandler", "Everest", "Allison", "Alexandros", "Pelias", "Damocles", "Megaera", "Aether", "Rheie", "Nike", "Alastor", "Asteria", "Hyperion", "Afina", "Acantha", "Glaukos", "Billie-Jo", "Naamah", 
	"Sweetsmile", "AutumnCinder", "Iron-Hit", "Dolly-Leigh", "Gentlecheeks", "Olyvya", "Cindy-Dawn", "Bubba", "Karlee", "Stone", "Masher", "Grapple", "Atomic-Crusher", "Billie-Rae", "Peaceflow"
  };
  
  void A_SetHumanNickname(string extra = "", int ranktype = 0)
  {
	if (!dcy_humanname) return;
	string rank;
	
	switch(ranktype)
	{
		case 0: rank = human_extraname[random(0, human_extraname.Size() - 1)]; break;
		case 1: rank = human_extranamesg[random(0, human_extranamesg.Size() - 1)]; break;
		case 2: rank = human_extranamecg[random(0, human_extranamecg.Size() - 1)]; break;
	}
	
	bool middlename = random(0, 4);
	humantag = (((extra == "random") ? rank : extra)..((extra != "") ? " " : "")..
	((!middlename) ? human_firstname[random(0, human_firstname.Size() - 1)].." "..human_middlename[random(0, human_middlename.Size() - 1)].." "..human_lastname[random(0, human_lastname.Size() - 1)]
	: human_firstname[random(0, human_firstname.Size() - 1)].." "..human_lastname[random(0, human_lastname.Size() - 1)]).."\c-");
  }
  
  void A_ScientificName()
  {
	if (!dcy_scientificname) return;
	switch (dcy_scientificname)
	{
		case 1: SetTag(((dcy_humanname && humantag != "") ? humantag : oldtag).." ".."["..scientific.."]"); break;
		case 2: SetTag(scientific); break;
		case 3: SetTag(oldtag.." ".."["..scientific.."]"); break;
		case 4: SetTag(scientific); break;
	}
  }
  
  States
  {
  Death.Massacre:
	#### # 1;
	#### # 0
	{
		//Stop all sounds
		A_StopSounds(0, 1000);
		if (bBOSSDEATH) A_BossDeath2();
		A_RemoveChildren(1, RMVF_EVERYTHING);
	}
	Stop;
  Death.Fire:
	#### # 0
	{
		if (species == "Former Humans" || species == "Sergeants" || species == "Chaingunners" || species == "Imps")
		{
			A_StartSound((brns) ? brns : DeathSound, CHAN_VOICE);
			DCY_GuyOnFire a = DCY_GuyOnFire(Spawn("DCY_GuyOnFire", pos));
			if (a) a.og = GetClassName();
		}
		else
			SetStateLabel("Death");
	}
	Stop;
  }
}

Class DCY_MassResurrection : CustomInventory
{
  Default
  {
  +INVENTORY.ALWAYSPICKUP;
  }
  
  States
  {
  Pickup:
	TNT1 A 0 Thing_Raise(0);
	Stop;
  }
}