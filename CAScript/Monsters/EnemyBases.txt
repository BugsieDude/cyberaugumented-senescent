Class DCY_GuyOnFire : DCYMonster
{
  class<Actor> og;
  
  Default
  {
  -ISMONSTER
  -COUNTKILL
  +NONSHOOTABLE
  +NOBLOOD
  -SOLID
  Height 56;
  Radius 20;
  }
  
  States
  {
  Spawn:
	FUUU A 0 NoDelay { A_NoBlocking(); A_Die(); }
  Death:
	FUUU ABCDEFGHIJKLMNOPQRSTU 3 Bright
	{
		A_SpawnItemEx("DCY_ImpBigFlame", random(-12, 12), random(-12, 12), random(10, 45), 0, 0, random(2, 6), 0, SXF_NOCHECKPOSITION, failchance: 100);
		A_SpawnItemEx("DCY_ImpFlame1", random(-12, 12), random(-12, 12), random(10, 45), 0, 0, random(2, 6), 0, SXF_NOCHECKPOSITION, failchance: 100);
	}
	FUUU V -1;
	Stop;
  Raise:
	FUUU UTRPNLJHFDBA 3 Bright;
	FUUU A 0 Bright
	{
		if (og)
		{
			Actor r = Spawn(og, pos);
			if (r)
			{
				r.CopyFriendliness(self, true);
				r.angle = angle;
			}
		}	
	}
	Stop;
  }
}

CLASS DCYMonster : Actor abstract
{
  mixin DCY_Effects;
  double sfxdistance;
  
  Default
  {
    Monster;
    +FLOORCLIP;
	+ROLLCENTER;
	DCYMonster.TagColor "j";
	DCYMonster.GibType "DCY_Giblets";
	Tag "Monster";
	TeleFogSourceType "DCY_EnemySourceTeleport";
	TeleFogDestType "DCY_EnemyTeleport";
	DamageFactor "SpawnerDeath", 0;
  }
  
  int warningdistance;
  bool boss;
  Sound brns;
  string tcol;
  class<Actor> gib;
  transient TextureID particlefire;
  
  string wf;
  property WalkFlames : wf;
  
  property BurnSound: brns;
  property TagColor: tcol;
  property GibType: gib;
  
  override void tick()
  {
	super.tick();
	
	if (!particlefire)
		particlefire = TexMan.CheckForTexture("graphics/Particles/dcysmokep.png");
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	sfxdistance = 1500;
  }
  
  int ProgressionLevel()
  {
	let d = DCY_Variables.Get();
	return (d) ? d.dcyLevel : 0;
  }
  
  void A_SetPainChance(int num)
  {
	painchance = num;
  }
  
  void A_BossDeath2()
  {
	A_BossDeath();
	//A_KillMaster("SpawnerDeath");
  }
  
  void A_WalkFlame()
  {
	if (wf == "") return;
	if (DCY_EffectDistance(sfxdistance)) A_SpawnItemEx(wf, xvel: 1, flags: SXF_NOCHECKPOSITION);
  }
  
  void DCY_Look()
  {
	A_LookEx((level.levelname == "Decimal Error") ? LOF_NOSOUNDCHECK|LOF_NOSEESOUND : LOF_NOSEESOUND, label: "Look");
  }
  
  void DCY_LookingForPlayer()
  {
	A_Chase(null, "Alert", CHF_NOPLAYACTIVE);
  }
  
  void A_Dodging(double speed)
  {
	Vel3DFromAngle(speed, Angle*128/256+random(64, 192), 0);
  }
  
  void A_Hop(double height)
  {
    vel.z += height;
  }
  
  void A_Flip()
  {
	A_SetScale(Scale.X * randompick(-1, 1), Scale.Y);
  }
  
  void DCY_AlertSound()
  {
	A_StartSound(SeeSound, CHAN_VOICE, attenuation: (!bBOSS) ? 1 : 0);
  }
  
  void DCY_SoulExplode()
  {
	if (damagetype != "Massacre")
	{
		A_SpawnItemEx("DCY_TSoul", frandom(-radius, radius), frandom(-radius, radius), frandom(0, height), zvel: frandom(1.5, 2.5), flags: SXF_TRANSFERSCALE|SXF_TRANSFERALPHA);
		if (!random(0, 1)) A_SpawnParticleEx(0x0f52ba, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, 200, 120, 0, frandom(-20, 20), frandom(-20, 20), 36 + frandom(-20, 20), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), startalphaf: 0.35, fadestepf: 0.0025, sizestep: 1.525);
	}
  }
  
  void DCY_Gibs(bool playsnd = true)
  {
	if (playsnd) A_XScream();
	A_SpawnItemEx(gib, xvel: vel.x, yvel: vel.y, zvel: vel.z, flags: SXF_ABSOLUTEVELOCITY|SXF_USEBLOODCOLOR);
  }
  
  static void ThingAnnounce(String message, String sound, String mColor)
  {
	if (cyberaugumented_noenemyannouncements || level.mapname == "TITLEMAP" || gamestate == GS_TITLELEVEL)
		return;
		
	console.printf("\c".."["..mColor.."]"..message.."\c-");
	if(sound) S_StartSound(sound, CHAN_5, CHANF_DEFAULT);
  }
  
  void A_PoundEffect(float gscale = 100)
  {
	for (int i = 0; i < 360; i += random(10, 30))
		if (DCY_EffectDistance(sfxdistance))
		{
			A_SpawnParticleEx(0xaaaaaa, TexMan.CheckForTexture("graphics/Particles/dcygas.png"), STYLE_TRANSLUCENT, SPF_RELATIVE, random(90, 95), 100 * (gscale / 100), i, zoff: 5, velx: frandom(1, 3) * (gscale / 100), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), accelz: 0.01, startalphaf: 0.35, fadestepf: 0.0075, sizestep: 1 * (gscale / 100));
			A_SpawnParticleEx(0x666666, TexMan.CheckForTexture("graphics/Particles/dcyflamep.png"), STYLE_ADD, SPF_RELATIVE, random(90, 95), 100 * (gscale / 100), i, zoff: 5, velx: frandom(1, 3) * (gscale / 50), vely: frandom(-0.5, 0.5), velz: frandom(-0.5, 0.5), accelz: 0.01, startalphaf: 0.35, fadestepf: 0.0075, sizestep: 1 + (gscale / 100));
		}
		
	for (int i = random(10, 24); i > 0; i--)
		if (DCY_EffectDistance(sfxdistance)) A_SpawnParticleEx(0x4f403d, TexMan.CheckForTexture("graphics/Particles/dcysquarep.png"), STYLE_TRANSLUCENT, SPF_RELATIVE, random(90, 95), random(2, 4), 0, frandom(-20, 20) * (gscale / 100), frandom(-20, 20) * (gscale / 100), 10, velx: frandom(-9, 9) * (gscale / 100), vely: frandom(-9, 9) * (gscale / 100), velz: frandom(1, 6) * (gscale / 100), accelz: -0.5, sizestep: -0.05);
  }
  
  void A_Restore()
  {
	A_SetScale(abs(Scale.X), Scale.Y);
  }
	
  States
  {
  Death.Massacre:
	#### # 1;
	#### # 0
	{
		//Stop all sounds
		for (int i = 0; i < 8; i++)
			A_StopSound(i);
		
		if (bBOSSDEATH) A_BossDeath2();
		
		A_RemoveChildren(1, RMVF_EVERYTHING);
	}
	Stop;
  Death.Fire:
	#### # 0
	{
		if (species == "Former Humans" || species == "Sergeants" || species == "Chaingunners" || species == "Imps")
		{
			A_StartSound((brns) ? brns : DeathSound, CHAN_VOICE);
			DCY_GuyOnFire a = DCY_GuyOnFire(Spawn("DCY_GuyOnFire", pos));
			if (a) a.og = GetClassName();
		}
		else
			SetStateLabel("Death");
	}
	Stop;
  }
}

Class DCY_MassResurrection : CustomInventory
{
  Default
  {
  +INVENTORY.ALWAYSPICKUP;
  }
  
  States
  {
  Pickup:
	TNT1 A 0 Thing_Raise(0);
	Stop;
  }
}