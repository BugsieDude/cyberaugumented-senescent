CLASS DCYMonster : Actor abstract
{
  mixin DCY_Effects;
  double sfxdistance;
  
  Default
  {
    Monster;
    +FLOORCLIP;
	DCYMonster.TagColor "j";
	Tag "Monster";
	TeleFogSourceType "DCY_EnemyTeleport";
	TeleFogDestType "DCY_EnemyTeleport";
	DamageFactor "SpawnerDeath", 0;
	PainChance "PlayerStun", 256;
  }
  
  int warningdistance;
  bool boss;
  Sound BurnSound;
  string tcol;
  transient TextureID particlefire;
  
  string wf;
  property WalkFlames : wf;
  
  property BurnSound: BurnSound;
  property TagColor: tcol;
  
  override void tick()
  {
	super.tick();
	
	if (!particlefire)
		particlefire = TexMan.CheckForTexture("graphics/Particles/dcysmokep.png");
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	sfxdistance = 1500;
  }
  
  int ProgressionLevel()
  {
	let d = DCY_Variables.Get();
	return (d) ? d.dcyLevel : 0;
  }
  
  void A_SetPainChance(int num)
  {
	painchance = num;
  }
  
  void A_BossDeath2()
  {
	A_BossDeath();
	//A_KillMaster("SpawnerDeath");
  }
  
  void A_WalkFlame()
  {
	if (wf == "") return;
	if (DCY_EffectDistance(sfxdistance)) A_SpawnItemEx(wf, xvel: 1, flags: SXF_NOCHECKPOSITION);
  }
  
  void DCY_Look()
  {
	A_LookEx((level.levelname == "Decimal Error") ? LOF_NOSOUNDCHECK|LOF_NOSEESOUND : LOF_NOSEESOUND, label: "Look");
  }
  
  void DCY_LookingForPlayer()
  {
	A_Chase(null, "Alert", CHF_NOPLAYACTIVE);
  }
  
  void A_Dodging(double speed)
  {
	Vel3DFromAngle(speed, Angle*128/256+random(64, 192), 0);
  }
  
  void A_Hop(double height)
  {
    vel.z += height;
  }
  
  void A_Flip()
  {
	A_SetScale(Scale.X * randompick(-1, 1), Scale.Y);
  }
  
  void DCY_AlertSound()
  {
	A_StartSound(SeeSound, CHAN_VOICE, attenuation: (!bBOSS) ? 1 : 0);
  }
  
  void DCY_SoulExplode()
  {
	if (damagetype != "Massacre")
	{
		A_SpawnItemEx("DCY_TSoul", frandom(-radius, radius), frandom(-radius, radius), frandom(0, height), zvel: frandom(1.5, 2.5), flags: SXF_TRANSFERSCALE|SXF_TRANSFERALPHA);
		if (!random(0, 1)) A_SpawnParticleEx(0x0f52ba, TexMan.CheckForTexture("graphics/Particles/dcysmokep.png"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE, 200, 120, 0, frandom(-20, 20), frandom(-20, 20), 36 + frandom(-20, 20), frandom(-0.5, 0.5), frandom(-0.5, 0.5), frandom(-0.5, 0.5), startalphaf: 0.35, fadestepf: 0.0025, sizestep: 1.525);
	}
  }
		
  static void ThingAnnounce(String message, String sound, String mColor)
  {
	if (cyberaugumented_noenemyannouncements || level.mapname == "TITLEMAP")
		return;
		
	console.printf("\c".."["..mColor.."]"..message.."\c-");
	if(sound)
	{
		S_StartSound(sound, CHAN_5, CHANF_DEFAULT);
	}
  }
  
  States
  {
  Death.Massacre:
	#### # 1;
	#### # 0
	{
		//Stop all sounds
		for (int i = 0; i < 8; i++)
			A_StopSound(i);
		
		if (bBOSSDEATH) A_BossDeath2();
		
		A_RemoveChildren(1, RMVF_EVERYTHING);
	}
	Stop;
  }
}

Class DCY_MassResurrection : CustomInventory
{
  Default
  {
  +INVENTORY.ALWAYSPICKUP;
  }
  
  States
  {
  Pickup:
	TNT1 A 0 Thing_Raise(0);
	Stop;
  }
}