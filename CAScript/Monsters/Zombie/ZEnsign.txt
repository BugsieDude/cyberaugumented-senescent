Class DCY_ZEnsign : DCY_Zombe
{
  Default
  {
  Health 300;
  Speed 7;
  FastSpeed 11;
  DropItem "Shotgun";
  DropItem "DCY_Palisade", 150;
  DropItem "Medikit", 150;
  DropItem "Chaingun", 128;
  DropItem "PlasmaRifle", 50;
  DropItem "DCY_Emphasis", 20;
  +QUICKTORETALIATE;
  +NEVERRESPAWN;
  +NOTARGET;
  +DONTGIB;
  +NODROPOFF;
  +ROLLSPRITE;
  +ROLLCENTER;
  SeeSound "ZEnsign/Sight";
  ActiveSound "ZEnsign/Active";
  PainSound "ZEnsign/Pain";
  DeathSound "ZEnsign/Death";
  AttackSound "";
  Tag "\c[i7]Z-Ensign\c-";
  Obituary "%o wasn't good enough to handle a Z-Ensign.";
  Translation "240:247=[94,0,0]:[0,0,0]", "16:47=%[0.20,0.00,0.00]:[2.00,0.50,0.00]", "192:207=%[0.42,0.00,0.00]:[2.00,1.02,1.02]", "80:111=[192,192,192]:[0,0,0]", "1:3=%[0.00,0.00,0.00]:[0.71,0.71,0.71]", "5:12=%[0.00,0.00,0.00]:[0.45,0.45,0.45]", "13:15=[65,55,50]:[0,0,0]", "128:143=[175,159,152]:[21,18,17]", "144:151=[176,160,153]:[21,18,17]", "152:159=[175,159,152]:[21,18,17]", "48:79=%[0.00,0.00,0.00]:[1.15,0.98,0.83]", "236:239=%[0.00,0.00,0.00]:[0.56,0.56,0.56]";
  }
  
  protected int weaponslot;
  int missile;
  int oldspeed;
  int grenadecooldown;
  
  void A_ZEnsignASG()
  {
	A_StartSound("Underline/Fire", CHAN_WEAPON);
	
	for (int i = 5; i > 0; i--)
		A_SpawnProjectile("DCY_Zombie2Tracer", 30, 3, frandom(-1.1, 1.1), CMF_TRACKOWNER|CMF_OFFSETPITCH, random(-1, 1));
	
	A_FaceTarget();
  }
  
  override string GetObituary (Actor victim, Actor inflictor, Name mod, bool playerattack)
  {
	static const string messages[] =
	{
		"%o wasn't good enough to handle a Z-Ensign.",
		"%o got outsmarted.",
		"You shouldn't have gone here.",
		"Death has gotten the best of you.",
		"Z-Ensign superiority",
		"Quietus."
	};

	return messages[Random(0, messages.Size() - 1)];
  }
  
  void A_EnsignChase()
  {
	A_Chase();
	
	if (!random(0, 40) && target && CheckSight(target))
		SetStateLabel("Dodge");
  }
  
  state A_EnsignChoose(stateLabel s1, stateLabel s2, stateLabel s3)
  {
	switch(weaponslot)
	{
		case 1: return ResolveState(s1); break;
		case 2: return ResolveState(s2); break;
		case 3: return ResolveState(s3); break;
	}
	
	return ResolveState(null);
  }
  
  void A_EnsignSprite()
  {
	switch (weaponslot) //Sprite handling
	{
		case 0: break;
		case 1: sprite = GetSpriteIndex("UU5_"); break;
		case 2: sprite = GetSpriteIndex("UU6_"); break;
		case 3: sprite = GetSpriteIndex("UU7_"); break;
	}
  }
  
  override void Tick()
  {
	super.tick();
	
	if (grenadecooldown > 0)
		grenadecooldown--;
  }
  
  override void PostBeginPlay()
  {
	super.postbeginplay();
	weaponslot = random(1, 3);
	A_EnsignSprite();
  }
  
  States
  {
  LoadSprites:
	UU5_ ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
	UU6_ ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
	UU7_ ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
  Spawn:
    #### A 10 DCY_Look();
	Loop;
  Look:
	#### AAABBBCCCDDD 2
	{
		DCY_LookingForPlayer();
		A_Recoil(-0.1);
		if (random(0, 15) == 0)
			SetStateLabel("Stand");
	}
	#### A 0 A_CheckSight("Look");
	Goto Alert;
  Alert:
	#### # 0 DCY_AlertSound();
	Goto See;
  Stand:
	#### AAAAAAAAAAAAAAAAAAAAAA 1 A_Chase(null, "Alert", CHF_NOPLAYACTIVE|CHF_DONTMOVE);
	#### A 0 A_CheckSight("Look");
	Goto Alert;
  See:
    #### AABBCCDD 2 { A_Recoil(-0.1); A_EnsignChase(); }
	Loop;
  Dodge:
	U_DR # 0
	{
		A_FaceTarget();
		frame = randompick(0, 1);
		A_Hop(random(4, 5));
		Vel3DFromAngle(18, Angle*128/256+((!frame) ? 64 : 192), 0);
	}
	U_DR ################# 1 { roll += (!frame) ? -22 : 22; }
	U_DR # 0 { roll = 0; A_FaceTarget(); A_EnsignSprite(); if (target) SetStateLabel("Missile"); }
	Goto See;
  Missile:
    #### # 1
	{
		if (random(0, 2) == 1) A_StartSound(ActiveSound, CHAN_VOICE);
		
		if ((random(0, 4) == 1) && grenadecooldown == 0)
			SetStateLabel("Grenade");
		
		A_EnsignChoose("Missile1", "Missile2", "Missile3");
	}
	Goto Choose;
  Choose:
	#### # 0 A_EnsignChoose("Missile1", "Missile2", "Missile3");
	Goto See;
  Grenade:
	UU5_ Y 10
	{
		if (grenadecooldown > 0)
			A_EnsignChoose("Missile1", "Missile2", "Missile3");
		
		A_FaceTarget();
	}
	UU5_ Z 10
	{	
		let grenade = Spawn("DCY_EnemyGrenade", pos + (0,0,32));
		if (grenade)
		{
			grenade.target = self;
			grenade.angle = angle;
			grenade.Vel3DFromAngle((target && distance3D(target) > 200) ? 34 : (distance3D(target) / 15), grenade.angle, BulletSlope() - 10);
		}
		
		grenadecooldown = 400;
		
		bFRIGHTENED = true;
	}
	UU5_ Z 0 { A_EnsignSprite(); }
	Goto Retreat;
  Retreat:
	#### A 0
	{
		oldspeed = speed;
		A_SetSpeed(15);
	}
	#### AABBCCDDAABBCCDDAABBCCDDAABBCCDD 2 A_Chase(null, null);
	#### A 0
	{
		bFRIGHTENED = false;
		A_SetSpeed(oldspeed);
	}
	Goto See;
  Missile1:
	#### E 5 A_FaceTarget();
    #### E 5
	{
		if (random(0, 2) == 0 && vel.z == 0)
		{
			A_Dodging(9);
			A_Hop(4);
		}
	}
	#### F 5
	{
		for (int i = 7; i > 0; i--)
			A_SpawnProjectile("DCY_ZombieTracer", 30, 3, frandom(-1.5, 1.5), CMF_TRACKOWNER|CMF_OFFSETPITCH, random(-1, 1));
		
		A_FaceTarget();
		A_StartSound("Shotgun/Fire", CHAN_WEAPON);
	}
	#### E 15 A_FaceTarget();
	#### A 0
	{
		if (random(0, 2) == 1)
			SetStateLabel("GiveRandomToken");
	}
	Goto See;
  Missile2:
	#### E 10
	{
		missile = random(9, 10);
		A_FaceTarget();
	}
	#### F 2 { missile--; A_ZEnsignASG(); }
	#### E 7
	{
		if (random(0, 8) == 1 && vel.z == 0)
		{
			A_Dodging(9);
			A_Hop(4);
		}
		
		A_FaceTarget();
		
		if (missile <= 0)
		{
			if (random(0, 2) == 1)
				SetStateLabel("GiveRandomToken");
			
			SetStateLabel("See");
		}
	}
	Goto Missile2+1;
  Missile3:
	#### A 10 A_FaceTarget();
	#### E 0
	{
		A_StartSound("DSWTH", CHAN_WEAPON, 0, 1.0, 0.45);
		
		if (random(0, 2) == 1 && vel.z == 0)
		{
			A_Dodging(9);
			A_Hop(4);
		}
		
		A_FaceTarget();
	}
    #### EEEEEEEEEEEEEEEEEEEEE 1 A_FaceTarget(1, 1);
	#### E 5 A_FaceTarget(1, 1);
	#### F 8
	{
		A_StartSound("D4RAILGF", CHAN_WEAPON, 0, 1.0, 0.45);
		A_CustomRailgun(128, flags: RGF_SILENT|RGF_FULLBRIGHT, sparsity: 30, spawnclass: "DCY_RazerLaser");
		A_FaceTarget(1, 1);
	}
	#### E 40;
	#### A 0
	{
		if (random(0, 2) == 1)
			SetStateLabel("GiveRandomToken");
	}
	Goto See;
  GiveRandomToken:
    #### # 1
	{
		if (weaponslot == 1)
			weaponslot = randompick(2, 3);
		else if (weaponslot == 2)
			weaponslot = randompick(1, 3);
		else if (weaponslot == 3)
			weaponslot = randompick(1, 2);
		
		A_EnsignSprite();
	}
	Goto See;
  Pain:
    #### G 4 { roll = 0; A_EnsignSprite(); }
	#### G 4
	{
		if (random(0, 5) == 1)
		{
			if (vel.z == 0)
				A_Hop(random(4, 5));
			
			A_Dodging(9);
			SetStateLabel("See");
		}
		
		A_Pain();
	}
	Goto See;
  Death:
	#### # 0
	{
		roll = 0;
		switch (random(0, 3))
		{
			case 0: Return ResolveState("Death1"); break;
			case 1: Return ResolveState("Death2"); break;
			case 2: Return ResolveState("NormalDeath"); A_EnsignSprite(); break;
			case 3: Return ResolveState("Death3"); break;
		}
		
		Return ResolveState(null);
	}
	Goto NormalDeath;
  NormalDeath:
    #### H 6 A_SetScale(randompick(-1, 1) * Scale.X, Scale.Y);
	#### I 6 A_Scream();
	#### J 6 A_NoBlocking();
	#### K 6;
	#### L -1;
	Stop;
  Death1:
	U_DU A 6;
	U_DU B 6 A_Scream();
	U_DU CBC 6;
	U_DU D 6 A_NoBlocking();
	U_DU E -1;
	Stop;
  Death2:
	U_D1 A 6;
	U_D1 B 6 A_Scream();
	U_D1 C 5 A_NoBlocking();
	U_D1 DEFGHI 4;
	U_D1 J -1;
	Stop;
  Death3:
	U_D2 A 6 A_SetScale(randompick(-1, 1) * Scale.X, Scale.Y);
	U_D2 B 7 A_Scream();
	U_D2 C 6 A_NoBlocking();
	U_D2 DE 5;
	U_D2 F -1;
	Stop;
  XDeath:
	#### # 0 { roll = 0; }
	Goto Super::XDeath;
  Raise:
	#### # 0 { A_EnsignSprite(); A_SetScale(1, 1); }
    #### KJIH 5;
	Goto See;
  }
}