Class CyberaugumentedProtagonist : DoomPlayer
{
  double ByteAngle, Angle;
  int DashCooldown, JumpCooldown;
  double djump2rnd;
  double dashpower;
  double dashpowerup;
  bool intheair;
  bool jumpbutton;
  int jumptics;
  float secrettics;
  int playwatersound;
  bool submerged;
  bool falling;
  double wna;
  playerinfo CAPlayer;
	
  override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
  {
    int dmg = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	
	//Sound is based off the amount of damage the player takes
    if (dmg > 200)
        painsound = "slayer/painmassive";
	else if (dmg > 90)
        painsound = "slayer/painhuge";
	else if (dmg > 25)
        painsound = "slayer/painbig";
	else if (dmg > 15)
        painsound = "slayer/pain";
    else if (dmg > 10)
        painsound = "slayer/painsmall";
    else if (dmg > 5)
        painsound = "slayer/paintiny";
	else
		painsound = "slayer/paintiny";
	
	return dmg;
  }

  override bool OnGiveSecret(bool printmsg, bool playsound)
  {
	static const string toptext1[] =
	{
		"Secret",
		"Mystery",
		"Untold Place",
		"Unknown Area",
		"Mysterious Location",
		"Privious Location",
		"Privy",
		"Veiled Area",
		"Undisclosure"
	};
	
	static const string toptext2[] =
	{
		"found",
		"discovered",
		"observed",
		"percieved",
		"located",
		"spotted",
		"pinpointed",
		"retrieved"
	};
	
	static const string messages[] =
	{
		"It is nothing but a mystery",
		"It is a mystery",
		"OOOYEAAAAAAAAAAH",
		"0_0",
		"You found a secret!"
	};
	
	S_StartSound("misc/secret", 10, attenuation: ATTN_IDLE);
	DCY_notHudMessageHandler.PlainMsg("BIGFONT", "\c".."[".."j1".."]"..toptext1[random(0, toptext1.Size() - 1)].." "..toptext2[random(0, toptext2.Size() - 1)],
	(240, 180), (480, 360), color: Font.CR_GREEN, time: (0, 3, 0.41), id: 5000);
	DCY_notHudMessageHandler.PlainMsg("SMALLFONT", messages[random(0, messages.Size() - 1)], (240, 196), (480, 360), color: Font.CR_UNTRANSLATED, time: (0, 3, 0.41), id: 5001);
	DCY_notHudMessageHandler.PlainMsg("DCY_NON3", "AAAAAAAAAAAA", (80,1033), (160,2000), time: (0, 3, 0.41), id: 6000);
	return false;
  }
  
  /*override color GetPainFlash()
  {
	return 0;
  }*/
	
  override void Tick()
  {
	super.Tick();
	
	if (waterlevel == 3)
	{
		if (playwatersound == 0 && !submerged)
		{
			A_StartSound((self.vel.z < -4.5) ? "Water/SplashDive" : "Water/Dive", 10, CHANF_OVERLAP, attenuation: ATTN_IDLE);
			playwatersound = 1;
			submerged = true;
		}
	}
	else
		playwatersound = 0;
	
	if (waterlevel < 3 && submerged)
	{
		if (playwatersound == 0)
		{
			A_StartSound("Water/Surface", 11, CHANF_OVERLAP, attenuation: ATTN_IDLE);
			playwatersound = 1;
			submerged = false;
		}
	}
  }
  
  override Vector2 BobWeapon(double ticFrac) //inspired by Nobody told me about ID and Lithium
  {
	Vector2 p[2];
	Weapon w = player ? player.readyWeapon : null;
	
	if (!w || w.bDONTBOB) return (0, 0);
	
	for (int i = 0; i < 2; i++)
	{
		p[i] = (0, 0);
		double a = w.bobSpeed * 128 * player.GetWBobSpeed() * (level.time - 1 + i) * 0.044;
		double b = (!i) ? prevBob : player.bob;
		
		p[i].x = b * w.BobRangeX * ViewBob;
		p[i].y = b * w.BobRangeY * ViewBob;
		p[i].x *= Sin(a) + cos(a / 5) / 7;
		p[i].y *= Abs(Sin(a));
	}
	
	return p[0] * (1. - ticfrac) + p[1] * ticfrac;
  }
  
  override void HandleMovement()
  {
	super.HandleMovement();
		
	if (self.pos.z <= floorz)
	{
		intheair = false;
		jumptics = 0;
		jumpbutton = false;
	}
	
	if (self.vel.z <= 8)
	{
		if (jumptics == 7)
			jumpbutton = true;
		else
			jumptics += 1;
	}
	else
	{
		jumpbutton = false;
		jumptics = 0;
	}
	
	if (dashCoolDown > 0)
		dashCoolDown--;
	
	CyberDoubleJump();
	CyberHandleFalling();
  }
  
  void CyberHandleFalling()
  {
	if (vel.z < -45)
		falling = true;
	
	if (vel.z == 0 && falling == true)
	{
		A_QuakeEx(3, 3, 3, 30, 0, 1000, "", QF_3D|QF_SCALEDOWN);
		falling = false;
		A_StopSound(CHAN_BODY);
		A_StopSound(CHAN_VOICE);
		A_StartSound("slayer/crash", CHAN_BODY);
	}
  }
  
  transient CVar allowDashSound, dashSound; // Must be transient to prevent breaking save games
  
  void CyberDash()
  {
	let CAPlayer = self.player;
	Let Cmd = CAPlayer.Cmd.Buttons;
	
    // Dead, client-side predicting, or on cool down
    if (!player || waterlevel >= 3 || player.health <= 0 || !sv_allowdash || (player.cheats & CF_PREDICTING) || dashCoolDown > 0)
        return;
    
	// Get the player's movement inputs
	Vector2 moveDirection = (player.cmd.forwardmove, -player.cmd.sidemove);
	
	if (player.cmd.forwardmove || player.cmd.sidemove)
	{
		if (moveDirection ~== (0,0)) // If no input, simply dash in the facing direction
			moveDirection = AngleToVector(player.mo.angle);
		else
			moveDirection = RotateVector(moveDirection.Unit(), player.mo.angle); // Unit() so that it can be scaled correctly
		
		// It's recommended to cache client-side CVars for faster access
		if (!allowDashSound)
			allowDashSound = CVar.GetCVar("cl_allowdashsound", player);
		
		if (allowDashSound.GetBool())
		{
			if (!dashSound)
				dashSound = CVar.GetCVar("cl_dashsoundtype", player);
			
			if (dashSound.GetInt())
				A_StartSound("DASH2", CHAN_AUTO);
			else
				A_StartSound("DASH1", CHAN_AUTO);
		}
	
		dashCoolDown = sv_dashcooldown;
		
		if (!Player.onGround)
		{
			vel.z *= 0.25;
			vel += ((moveDirection * sv_dashpower) / 1.75, sv_dashpowerup); // Server CVars can be accessed directly in ZScript
		}
		else
			vel = ((moveDirection * sv_dashpower) * 1.5, 0);
	}
  }
  
  transient CVar allowDJumpSound, dJumpSound;
  
  void CyberDoubleJump()
  {
	let CAPlayer = self.player;
	Let Cmd = CAPlayer.Cmd.Buttons;
	
	//Null-Check. In case the caller isn't a Player
	if (!player || waterlevel >= 2 || player.health <= 0 || (player.cheats & CF_PREDICTING) || Player.onGround || intheair || !level.IsJumpingAllowed() || sv_nojump || !sv_allowdoublejump || waterlevel >= 2)
		return;
	
	if (self.vel.z <= 8 && (cmd & BT_JUMP) && jumpbutton)
	{
		if (!allowDJumpSound)
		allowDJumpSound = CVar.GetCVar("cl_allowdjumpsound", player);
		
		if (allowDJumpSound.GetBool())
		{
			if (!dJumpSound)
				dJumpSound = CVar.GetCVar("cl_djumpsoundtype", player);
				
			if (dJumpSound.GetInt())
				A_StartSound("DJUMP2A", CHAN_AUTO);
			else
				A_StartSound("DJUMP2B", CHAN_AUTO);
		}
			
		vel.z = 8.5;
		jumpbutton = false;
		intheair = true;
	}
  }
  
  Default
  {
  DamageFactor "Player", 0.00;
  DamageFactor "PlayerStun", 0.00;
  DamageFactor "Neonic", 0.00;
  DamageFactor "Ballista", 0.00;
  DamageFactor "Marines", 0.00;
  Player.StartItem "DCY_BurstPistol";
  Player.StartItem "DCY_HahahaPunchPunch";
  Player.StartItem "MegasphereHealth", 100;
  //Player.StartItem "DCY_RehauledPlasmaRifle";
  Player.StartItem "Clip", 50;
  Player.WeaponSlot 1, "DCY_HahahaPunchPunch", "DCY_ChainsawGoBZZZZZZZZZZZZZZZZ", "DCY_ArgentChainsaw";
  Player.WeaponSlot 2, "DCY_BurstPistol", "DCY_Razorwind";
  Player.WeaponSlot 3, "DCY_CombatShotgun", "DCY_UnderlineShotgun", "DCY_SuperShotty";
  Player.WeaponSlot 4, "DCY_CyberRifle", "DCY_Minigun";
  Player.WeaponSlot 5, "DCY_CuethemetalslugannounceersayingRocketLauncher", "DCY_ShitGrenadeThrowItBackPrivate";
  Player.WeaponSlot 6, "DCY_RehauledPlasmaRifle", "DCY_BallistaManefista", "DCY_NeonicWand";
  Player.WeaponSlot 7, "DCY_TheBFG9000", "DCY_TheBFG10000", "DCY_SiriusCrisis";
  Player.WeaponSlot 8, "DCY_Epitome", "DCY_Deracinator" "DCY_VeneratedTruncheon";
  Player.WeaponSlot 9, "DCY_EternalVoid", "DCY_TheCinerealOrdnance";
  Player.WeaponSlot 0, "";
  BloodType "AndroidNeonFluid", "AndroidNeonFluid", "AndroidNeonFluid";
  PainSound "slayer/pain";
  Player.AirCapacity 0;
  }
  
  States
  {
  Spawn:
    PLAY A -1;
    Loop;
  See:
    PLAY ABCD 4;
    Goto Spawn;
  Missile:
    PLAY E 12;
    Goto Spawn;
  Melee:
    PLAY F 6 BRIGHT;
    Goto Missile;
  Pain:
    PLAY G 4;
    PLAY G 4 A_StartSound(painsound, CHAN_BODY);
    Goto Spawn;
  Death:
    PLAY H 0 A_PlayerSkinCheck("AltSkinDeath");
  Death1:
    PLAY H 10;
    PLAY I 10 A_PlayerScream;
    PLAY J 10 A_NoBlocking;
    PLAY KLM 10;
    PLAY N -1;
    Stop;
  XDeath:
    PLAY O 0 A_PlayerSkinCheck("AltSkinXDeath");
  XDeath1:
    PLAY O 5;
    PLAY P 5 A_XScream;
    PLAY Q 5 A_NoBlocking;
    PLAY RSTUV 5;
    PLAY W -1;
    Stop;
  AltSkinDeath:
    PLAY H 6;
    PLAY I 6 A_PlayerScream;
    PLAY JK 6;
    PLAY L 6 A_NoBlocking;
    PLAY MNO 6;
    PLAY P -1;
    Stop;
  AltSkinXDeath:
    PLAY Q 5 A_PlayerScream;
    PLAY R 0 A_NoBlocking;
    PLAY R 5 A_SkullPop;
    PLAY STUVWX 5;
    PLAY Y -1;
    Stop;
  }
}