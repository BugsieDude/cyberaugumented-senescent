Class DCY_Powerup : Inventory abstract
{
  mixin DCY_Effects;
  
  string effectcolor;
  property EffectColor1 : effectcolor;
  bool lighty;
  property SpawnLight : lighty;
  float lightr;
  property LightRadius : lightr;
  bool wobbly;
  property Pulse : wobbly;
  sound noise;
  property AmbientNoise : noise;
  
  int bobstate;
  
  Default
  {
	DCY_Powerup.EffectColor1 "ffffff";
	DCY_Powerup.SpawnLight True;
	DCY_Powerup.LightRadius 40;
	DCY_Powerup.AmbientNoise "";
	+FLOATBOB
	+COUNTITEM
	+INVENTORY.AUTOACTIVATE
	RenderStyle "Add";
	Inventory.PickupMessage "\c[White]???\c-";
  }
  
  override void PostBeginPlay()
  {
	if (lighty)
		A_AttachLight("poweruplight", (wobbly) ? DynamicLight.PulseLight : DynamicLight.PointLight, effectcolor, lightr, (wobbly) ? (lightr / 1.35) : lightr);
	
	if (noise != "")
		A_StartSound(noise, 15, CHANF_LOOPING);
  }
  
  override void DoPickupSpecial(actor toucher)
  {
	A_StopSound(15);
  }
}

Mixin Class CYPowerup
{
  int time;
  
  void PowerTimer(sound warnsound, sound expiresound, color c, color c2, bool warn)
  {
    if (warn == true)
	{
		if(time == 140 || time == 105 || time == 70 || time == 35)
		{
		  Owner.A_StartSound(warnsound, 20, flags: CHANF_LOCAL|CHANF_OVERLAP);
		  Owner.A_SetBlend(c, 0.4, 12, c2);
		}
	}
	else
	{
		if(time == 140)
		{
		  Owner.A_StartSound(warnsound, 20, flags: CHANF_LOCAL|CHANF_OVERLAP);
		  Owner.A_SetBlend(c, 0.4, 46, c2);
		}
	}
	
	if (time == 2)
	{
	  Owner.A_SetBlend("White", 0.6, 20, c);
	  Owner.A_StartSound(expiresound, 20, flags: CHANF_LOCAL|CHANF_OVERLAP);
	}
  }
}

Class DCY_InvItem : CustomInventory
{
  Mixin DCY_Progression;
}