//===========================================================================
//
// WeaponSway.pk3
// Written by Nash Muhandes
//
// Feel free to incorporate this into your mods, all I ask for is my name
// in the credits. No need to ask me for permission. Have fun!
//
//===========================================================================

class CyberaugumentedWeaponSwayHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.A_GiveInventory("Cyberaugumented_Sway", 1);
	}
}

class Cyberaugumented_Sway : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}

	// weapon sway stuff
	const SWAY_SENSITIVITY_X = 30.0;//60.0;
	const SWAY_SENSITIVITY_Y = 2.0;//45.0;
	const SWAY_RECENTER_SPEED = 0.8;
	const SWAY_MAX_X = 25.0;//30.0;
	const SWAY_MIN_Y = -10.0;//-20.0;
	const SWAY_MAX_Y = 90.0;//100.0;
	double xofs;

	Actor plr;

	override void Tick(void)
	{
		if (Owner && Owner is "PlayerPawn")
		{
			plr = Owner;
		}

		if (plr)
		{
			if (plr.Health <= 0) return;

			let psp = plr.player.psprites;
			if (!psp) return;

			let wep = plr.player.ReadyWeapon;
			if (!wep) return;

			CVar cv;

			cv = CVar.GetCVar("cl_weaponsway_invert", plr.player);
			bool bInvert = (cv && cv.GetBool() == true);

			// horizontal sway
			double xinput = plr.GetPlayerInput(MODINPUT_YAW) * (bInvert ? 1 : -1);
			xinput = SWAY_SENSITIVITY_X * xinput / 32767.0;
			xofs += xinput;

			// vertical offset
			double ypitch = -plr.pitch;
			ypitch = SWAY_SENSITIVITY_Y * ypitch / 90.0;

			cv = CVar.GetCVar("cl_weaponsway", plr.player);

			bool bCanSway = (cv && cv.GetBool() == true &&
					(
						(plr.player.WeaponState & WF_WEAPONREADY)
						|| (plr.player.WeaponState & WF_WEAPONREADYALT)
						|| (plr.player.WeaponState & WF_WEAPONRELOADOK)
						|| (plr.player.WeaponState & WF_WEAPONZOOMOK)
						|| (plr.player.WeaponState & WF_WEAPONSWITCHOK)
					));

			// offset the sprite
			if (psp && bCanSway)
			{
				cv = CVar.GetCVar("cl_weaponsway_vertical", plr.player);
				bool bVerticalSway = (cv && cv.GetBool() == true);

				psp.x = (abs(xofs) < SWAY_MAX_X ? xofs : clamp(xofs, -SWAY_MAX_X, SWAY_MAX_X));

				if (bVerticalSway)
				{
					psp.y = ypitch + 32;

					// add jump velocity to Y
					psp.y += (plr.Vel.Z * 0.2/*2*/);
					psp.y = clamp(psp.y, SWAY_MIN_Y, SWAY_MAX_Y);
				}
			}
			/*
			else
			{
				xofs = 0;
				psp.x = 0;
				psp.y = 32;
			}
			*/

			// recenter the sprite
			if (xinput == 0) xofs *= SWAY_RECENTER_SPEED;

		}
	}
}
